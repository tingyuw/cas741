## \file InputConstraints.py
# \author Ting-Yu Wu
# \brief Provides the function for checking the physical constraints and software constraints on the input
## \brief Verifies that input values satisfy the physical constraints and software constraints
# \param inParams structure holding the input values
# \param pi ratio of circumference to diameter for any circle
def input_constraints(inParams, pi):
    outfile = open("log.txt", "a")
    print("function input_constraints called with inputs: {", file=outfile)
    print("  inParams = ", end="", file=outfile)
    print("Instance of InputParameters object", end="", file=outfile)
    print(", ", file=outfile)
    print("  pi = ", end="", file=outfile)
    print(pi, file=outfile)
    print("  }", file=outfile)
    outfile.close()
    
    if (not(-100000 <= inParams.F_vect_1 and inParams.F_vect_1 <= 100000)) :
        print("F_vect_1 has value ", end="")
        print(inParams.F_vect_1, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(-100000, end="")
        print(" (F_vect_min)", end="")
        print(" and ", end="")
        print(100000, end="")
        print(" (F_vect_max)", end="")
        print(".")
        raise Exception("InputError")
    if (not(0.0 < inParams.x_1 and inParams.x_1 <= 100000)) :
        print("x_1 has value ", end="")
        print(inParams.x_1, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(0.0, end="")
        print(" (d_min)", end="")
        print(" and ", end="")
        print(100000, end="")
        print(" (d_max)", end="")
        print(".")
        raise Exception("InputError")
    if (not(0.0 < inParams.x_2 and inParams.x_2 <= 100000)) :
        print("x_2 has value ", end="")
        print(inParams.x_2, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(0.0, end="")
        print(" (d_min)", end="")
        print(" and ", end="")
        print(100000, end="")
        print(" (d_max)", end="")
        print(".")
        raise Exception("InputError")
    if (not(pi / 2 < inParams.θ_1 and inParams.θ_1 < pi / 2)) :
        print("θ_1 has value ", end="")
        print(inParams.θ_1, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(pi / 2, end="")
        print(" (θ_min)", end="")
        print(" and ", end="")
        print(pi / 2, end="")
        print(" (θ_max)", end="")
        print(".")
        raise Exception("InputError")
    if (not(pi / 2 < inParams.θ_2 and inParams.θ_2 < pi / 2)) :
        print("θ_2 has value ", end="")
        print(inParams.θ_2, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(pi / 2, end="")
        print(" (θ_min)", end="")
        print(" and ", end="")
        print(pi / 2, end="")
        print(" (θ_max)", end="")
        print(".")
        raise Exception("InputError")
    
    if (not(inParams.F_vect_1 > 0)) :
        print("F_vect_1 has value ", end="")
        print(inParams.F_vect_1, end="")
        print(", but is expected to be ", end="")
        print("above ", end="")
        print(0, end="")
        print(".")
        raise Exception("InputError")
    if (not(inParams.x_1 > 0)) :
        print("x_1 has value ", end="")
        print(inParams.x_1, end="")
        print(", but is expected to be ", end="")
        print("above ", end="")
        print(0, end="")
        print(".")
        raise Exception("InputError")
    if (not(inParams.x_2 > 0)) :
        print("x_2 has value ", end="")
        print(inParams.x_2, end="")
        print(", but is expected to be ", end="")
        print("above ", end="")
        print(0, end="")
        print(".")
        raise Exception("InputError")
    if (not(0 < inParams.θ_1 and inParams.θ_1 < pi)) :
        print("θ_1 has value ", end="")
        print(inParams.θ_1, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(0, end="")
        print(" and ", end="")
        print(pi, end="")
        print(" (pi)", end="")
        print(".")
        raise Exception("InputError")
    if (not(0 < inParams.θ_2 and inParams.θ_2 < pi)) :
        print("θ_2 has value ", end="")
        print(inParams.θ_2, end="")
        print(", but is expected to be ", end="")
        print("between ", end="")
        print(0, end="")
        print(" and ", end="")
        print(pi, end="")
        print(" (pi)", end="")
        print(".")
        raise Exception("InputError")
